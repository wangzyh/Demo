# summary
1. 解决问题的效率，跟空间的利用效率有关
2. 解决问题的效率，跟算法的巧妙程度有关

## 定义
1. 线性表
![线性表定义](course/Data structure -- Zhejiang University/Data/2.1.jpg)

2. 树
- 树的定义
![树的定义](course/Data structure -- Zhejiang University/Data/3.1.jpg)
- 树的常用术语1
![树的常用术语1](course/Data structure -- Zhejiang University/Data/3.1.1.jpg)

2.1 二叉树
- 二叉树的定义
![二叉树的定义](course/Data structure -- Zhejiang University/Data/3.2.1.jpg)
- 特殊二叉树
![特殊二叉树](course/Data structure -- Zhejiang University/Data/3.2.2.jpg)
- 二叉树的几个重要性质
![二叉树的几个重要性质](course/Data structure -- Zhejiang University/Data/3.2.3.jpg)
- 二叉树的遍历
    - 前序遍历
    ![二叉树的遍历-前序遍历](course/Data structure -- Zhejiang University/Data/3.3.1.jpg)
    - 中序遍历
    ![二叉树的遍历-中序遍历](course/Data structure -- Zhejiang University/Data/3.3.2.jpg)
    - 后序遍历
    ![二叉树的遍历-后序遍历](course/Data structure -- Zhejiang University/Data/3.3.3.jpg)
    - 中序遍历非递归遍历算法
    ![中序遍历非递归遍历算法](course/Data structure -- Zhejiang University/Data/3.3.4.jpg)

3.1 二叉搜索树
- 二叉搜索树的定义
![二叉搜索树的定义](course/Data structure -- Zhejiang University/Data/4.1.1.jpg)

4.1 平衡二叉树
- 平衡二叉树的定义1
![平衡二叉树的定义1](course/Data structure -- Zhejiang University/Data/4.1.2.jpg)
- 平衡二叉树的定义2
![平衡二叉树的定义2](course/Data structure -- Zhejiang University/Data/4.1.3.jpg)


# Python相关
1. 统计list中重复项个数：
```python
from collections import Counter
d = dict(Counter(nums))
key = [key for key, value in d.items() if value==2]
```

